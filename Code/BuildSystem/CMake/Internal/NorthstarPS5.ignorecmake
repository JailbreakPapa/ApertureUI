# SCE:
# A simple toolchain definition for PS5.
# Note, this does everything based on SCE_PROSPERO_SDK_DIR rather than your path.

if(__COMPILER_PS5)
  	return()
endif()
set(__COMPILER_PS5 1)

set(CMAKE_SYSTEM_NAME Prospero)
set(CMAKE_SYSTEM_PROCESSOR x86_64)
set(UNIX 1)

# =============================================================================
# Verify SDK is installed and set environment variables
# =============================================================================
macro(assert_path_exists path)
  	if (NOT EXISTS "${path}")
    	message(FATAL_ERROR "Path <${path}> does not exist")
  	endif()
endmacro()

file(TO_CMAKE_PATH "$ENV{SCE_PROSPERO_SDK_DIR}" SCE_PROSPERO_SDK_DIR)
assert_path_exists("${SCE_PROSPERO_SDK_DIR}")
set(SCE_HOST_TOOLS_BIN_DIR "${SCE_PROSPERO_SDK_DIR}/host_tools/bin")
assert_path_exists("${SCE_HOST_TOOLS_BIN_DIR}")

message(STATUS "Configuring Prospero")

function(WarnIfKeyMissing KEY WARNING_TEXT)
	GET_FILENAME_COMPONENT(KEY_VALUE "${KEY}" ABSOLUTE CACHE PATH)
	if (KEY_VALUE MATCHES "/registry")
	    message(WARNING "${WARNING_TEXT}")
	endif()
endfunction()

if (CMAKE_GENERATOR MATCHES "Visual Studio")
	#add_link_options("$<$<OR:$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>,$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>>:--prx-stub-output-dir$<TARGET_LINKER_FILE_DIR:$<TARGET_PROPERTY:NAME>>>")
	#set(CMAKE_GENERATOR_TOOLSET "PS5Clang")
	#set(CMAKE_GENERATOR_PLATFORM "Prospero" CACHE STRING "" FORCE)

	if (CMAKE_GENERATOR MATCHES "2017")
		WarnIfKeyMissing("[HKEY_LOCAL_MACHINE\\SOFTWARE\\SCE\\Prospero\\Tools\\VSI 2017 (MSBuild PS5 Components) (I01);Version]" "Visual Studio Integration is not installed in VS2017. You will not be able to build generated projects with MSBuild.")
	elseif (CMAKE_GENERATOR MATCHES "2019")
		WarnIfKeyMissing("[HKEY_LOCAL_MACHINE\\SOFTWARE\\SCE\\Prospero\\Tools\\VSI 2019 (MSBuild PS5 Components) (I01);Version]" "Visual Studio Integration is not installed in VS2019. You will not be able to build generated projects with MSBuild.")
	elseif (CMAKE_GENERATOR MATCHES "2022")
		WarnIfKeyMissing("[HKEY_LOCAL_MACHINE\\SOFTWARE\\SCE\\Prospero\\Tools\\VSI 2022 (MSBuild PS5 Components) (I01);Version]" "Visual Studio Integration is not installed in VS2022. You will not be able to build generated projects with MSBuild.")
	endif()

elseif (CMAKE_GENERATOR MATCHES "Ninja")
	set(CMAKE_C_CREATE_SHARED_LIBRARY "<CMAKE_LINKER> cpplink -o <TARGET> <CMAKE_C_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> <LINK_LIBRARIES>" CACHE STRING "" FORCE)
	set(CMAKE_CXX_CREATE_SHARED_LIBRARY "<CMAKE_LINKER> cpplink -o <TARGET> <CMAKE_CXX_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> <LINK_LIBRARIES>" CACHE STRING "" FORCE)
	string(CONCAT CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} --oformat=prx	${LINKER_FLAGS}")
	enable_language(PS5PSSL)
endif ()

# Set file suffixes/prefixes
set(CMAKE_STATIC_LIBRARY_SUFFIX ".a")
set(CMAKE_STATIC_LIBRARY_SUFFIX_CXX ".a")

set(CMAKE_SHARED_LIBRARY_SUFFIX ".prx")
set(CMAKE_SHARED_LIBRARY_PREFIX "")
set(CMAKE_SHARED_LIBRARY_SUFFIX_CXX ".prx" CACHE STRING "" FORCE)
set(CMAKE_SHARED_LIBRARY_PREFIX_CXX "" CACHE STRING "" FORCE)

set(CMAKE_SHARED_MODULE_SUFFIX ".prx")
set(CMAKE_SHARED_MODULE_PREFIX "")
set(CMAKE_SHARED_MODULE_SUFFIX_CXX ".prx" CACHE STRING "" FORCE)
set(CMAKE_SHARED_MODULE_PREFIX_CXX "" CACHE STRING "" FORCE)

set(CMAKE_IMPORT_LIBRARY_SUFFIX "_stub_weak.a" CACHE STRING "" FORCE)
set(CMAKE_IMPORT_LIBRARY_PREFIX "" CACHE STRING "" FORCE)

set(CMAKE_IMPORT_LIBRARY_SUFFIX_CXX "_stub_weak.a" CACHE STRING "" FORCE)
set(CMAKE_IMPORT_LIBRARY_PREFIX_CXX "" CACHE STRING "" FORCE)

set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY BOTH)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE BOTH)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE BOTH)

# =============================================================================
# Define tool paths
# =============================================================================
set(SCE_PROSPERO_LIB_DIR ${SCE_PROSPERO_SDK_DIR}/lib)
set(CMAKE_C_COMPILER   "${SCE_HOST_TOOLS_BIN_DIR}/prospero-clang.exe" 	CACHE PATH "compiler" FORCE)
set(CMAKE_CXX_COMPILER "${CMAKE_C_COMPILER}" 						CACHE STRING "" FORCE)
set(CMAKE_ASM_COMPILER "${CMAKE_C_COMPILER}" 						CACHE STRING "" FORCE)
set(CMAKE_NM 			${SCE_HOST_TOOLS_BIN_DIR}/prospero-llvm-nm.exe 		CACHE PATH "nm")
set(CMAKE_OBJCOPY 		${SCE_HOST_TOOLS_BIN_DIR}/prospero-llvm-objcopy.exe CACHE PATH "objcopy")
set(CMAKE_OBJDUMP 		${SCE_HOST_TOOLS_BIN_DIR}/prospero-llvm-objdump.exe CACHE PATH "objdump")

set(SCE_CMAKE_DIR "${SCE_ROOT_DIR}/Prospero/Tools/CMake/")
find_program(CMAKE_PSSLWRAPPER NAMES PsslWrapper.exe PATHS "${SCE_CMAKE_DIR}" DOC "PS5 Pssl compiler wrapper")
set(CMAKE_AR            "${CMAKE_PSSLWRAPPER}"                      CACHE PATH "archive")
set(CMAKE_LINKER 		"${CMAKE_PSSLWRAPPER}" 		                CACHE PATH "linker")

# =============================================================================
# Define flags 
# =============================================================================
set(COMPILER_FLAGS 		 "")
set(FLAGS_DEBUG 		 "-O0 -g -D_DEBUG")
set(FLAGS_MINSIZEREL 	 "-Os -DNDEBUG")
set(FLAGS_RELEASE 		 "-O3 -DNDEBUG")
set(FLAGS_RELWITHDEBINFO "-O3 -g -D_DEBUG")

set(LINKER_FLAGS 				"")
set(LINKER_FLAGS_DEBUG 			"")
set(LINKER_FLAGS_MINSIZEREL 	"")
set(LINKER_FLAGS_RELEASE 		"")
set(LINKER_FLAGS_RELWITHDEBINFO "")

# =============================================================================
# Set compiler flags
# =============================================================================	
message(STATUS ${CMAKE_CXX_COMPILER_ID})
foreach(lang C CXX)
	string(CONCAT CMAKE_${lang}_FLAGS 				 "${CMAKE_${lang}_FLAGS_INIT}			     ${COMPILER_FLAGS}")
	string(CONCAT CMAKE_${lang}_FLAGS_DEBUG 		 "${CMAKE_${lang}_FLAGS_DEBUG_INIT} 		 ${FLAGS_DEBUG}")
	string(CONCAT CMAKE_${lang}_FLAGS_MINSIZEREL 	 "${CMAKE_${lang}_FLAGS_MINSIZEREL_INIT} 	 ${FLAGS_MINSIZEREL}")
	string(CONCAT CMAKE_${lang}_FLAGS_RELEASE 		 "${CMAKE_${lang}_FLAGS_RELEASE_INIT} 		 ${FLAGS_RELEASE}")
	string(CONCAT CMAKE_${lang}_FLAGS_RELWITHDEBINFO "${CMAKE_${lang}_FLAGS_RELWITHDEBINFO_INIT} ${FLAGS_RELWITHDEBINFO}")

	set(CMAKE_${lang}_CREATE_STATIC_LIBRARY "<CMAKE_AR> cpparchive rcs <TARGET> <LINK_FLAGS> <OBJECTS>" CACHE STRING "" FORCE)
	set(CMAKE_${lang}_LINK_EXECUTABLE       "<CMAKE_LINKER> cpplink -o <TARGET> <CMAKE_${lang}_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> <LINK_LIBRARIES>" CACHE STRING "" FORCE)
endforeach()

# Set language switches for Ninja
if (CMAKE_GENERATOR MATCHES "Ninja")
	set(CMAKE_CXX_FLAGS "-x c++ ${CMAKE_CXX_FLAGS}")
	foreach(config DEBUG MINSIZEREL RELEASE RELWITHDEBINFO)
		set(CMAKE_CXX_FLAGS_${config} "-x c++ ${CMAKE_CXX_FLAGS_${config}}")
	endforeach()

	set(CMAKE_C_FLAGS "-x c ${CMAKE_C_FLAGS}")
	foreach(config DEBUG MINSIZEREL RELEASE RELWITHDEBINFO)
		set(CMAKE_C_FLAGS_${config} "-x c ${CMAKE_C_FLAGS_${config}}")
	endforeach()
endif ()

# =============================================================================
# Set linker flags
# =============================================================================	
string(CONCAT CMAKE_EXE_LINKER_FLAGS 				"${CMAKE_EXE_LINKER_FLAGS} 					${LINKER_FLAGS}")
string(CONCAT CMAKE_EXE_LINKER_FLAGS_DEBUG 			"${CMAKE_EXE_LINKER_FLAGS_DEBUG} 			${LINKER_FLAGS_DEBUG}")
string(CONCAT CMAKE_EXE_LINKER_FLAGS_MINSIZEREL 	"${CMAKE_EXE_LINKER_FLAGS_MINSIZEREL} 		${LINKER_FLAGS_MINSIZEREL}")
string(CONCAT CMAKE_EXE_LINKER_FLAGS_RELEASE 		"${CMAKE_EXE_LINKER_FLAGS_RELEASE} 			${LINKER_FLAGS_RELEASE}")
string(CONCAT CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO} 	${LINKER_FLAGS_RELWITHDEBINFO}")

link_directories(${SCE_PROSPERO_SDK_DIR}/target/lib)
